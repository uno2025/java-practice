import java.io.BufferedReader;

/******************************
*定数を管理
******************************/
public class CreateSigv4{
    // 実行LambdaのHOSTとURL
    final private static String SEARCH_LAMBDA_HOST = xxxxx
    final private static String SEARCH_LAMBDA_URL = XXXXX
    // 実行用ユーザ情報
    final private static String SEARCH_LAMBDA_ACCESSKEY = XXXXX
    final private static String SEARCH_LAMBDA_SECRETKEY = XXXXX
  
  /******************************
  * AWSサービス共通の定数
  ******************************/
  final private static String REGION = "ap-northeast-1";
  final private static String SERVICE_LAMBDA = "lambda";
  
  /******************************
  * AWS CloudSearchの定数
  ******************************/
  // sigv4（AWS認証）情報
  final private static String END_STR = "aws4_request";
  final private static String ALGORITHM = "AWS4-HMAC-SHA256";
  
  /******************************
  * その他
  ******************************/
  // サーバ用ブロキシ名
  final private static String SY_PROXY = XXXXX:
  // 文字コード
  final private static String UTF_8 = "UTF-8":
  // 返却値
  final private static String ERR_OK = "OK";
  final private static String ERR_NG = "NG";
  
  /************************************************************
  * sigv4（APIを実行するための認証）を使用した署名付きリクエストを作成する。
  * @param  json    リクエストパラムに使用するjsonデータ
  * @return output  レスポンスのJSONデータ
  ************************************************************/
  public static String doShomei(String json) throws I0Exception, NoSuchAleorithmException {
    String output = new String;
    
    /*
    ＊タスク1.名バージョン4の正規リクエストを作成する・
    * https://docs.aws.amazon.com/ja_jp/general/latest/gr/sisv4-create-canonical-request.html
    */
    SimpleDateFormat xAmzDateFormatter = new SimpleDateFormat（"yyyyMMdd'T'HHmmss'Z'");
    xAmzDateFormatter.setTimeZone(TimeZone.getTimeZone("UTC"));
    String xAmzDate = xAmzDateFormatter.format(new Date()).trim();
    
    // cloudSearchのHOST名（URLからhttps抜いただけの値）
    String host = SEARCH_LAMBDA_HOST;
    String requestPayload = DigestUtils.sha256Hex(json);
    String httpRequestMethod = "POST";
    String canonicalUri = "/";
    String signedHeaders = "content-type;host;x-amz-date";
    String canonicalQueryString = "";
    String contentType = "application/json";
    String canonicalHeaders = "content-type:" + contentType + "¥nhost:" + host + "¥nx-amz-date:" + xAmzDate;
    String canonicalRequest = 
      httpRequestMethod + '¥n' +
        canonicalUri + '¥n' +
          canonicalQueryString + '¥n' +
            cananicalHeadars + '¥n' + '¥n' +
              signedHeaders + '¥n' +
                request Payload;
    
    String hashedCanonicalRequest = DigestUtils.sha256Hex(canonicalRequest);
    
    /*
    * タスク2、署名バージョン4の署名文字列を作成する・
    * https://docs.aws.amazon.com/ja_jp/general/latest/gr/sigv4-calculate-signature.html
    */
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
    dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
    String date = dateFormat.format(new Date()).trim();
    String region = REGION;
    String service = SERVICE_LAMBDA;
    String endStr = END_STR;
    String algorithm = ALGORITHM;
    String credentialScope = date + "/" + region + "/" + service + "/" + endStr;
    
    String stringToSign = algorithm + "¥n"
      + xAmzDate + "¥n"
      + credentialScope + "¥n"
      + hashedCanonicalRequest;
    
    /*
    * タスク3.署名バージョン4の署名を計算する。
    * https://docs.aws.amazon.com/ja_jp/general/latest/gr/sigv4-calculate-signature.html
    */
    // Cloudiearch実行ユーザ
    String accessKey = SEARCH_LAMBDA_ACCESSKEY;
    String secretKey = SEARCH_LAWBDA_SECRETKEY;
    
    try {
      /*
      * Javaを使用して署名キーを取得
      * https://docs.aws.amazon.com/ja_jp/general/latest/gr/sienature-v4-examples.html#signature-v4-examples-java
      */
      byte[] key = getSignatureKey(secretKey, date, region, service);
      String signature = String.valueOf(Hex.encodeHex(hmacSHA256(stringToSign, key)));
      
      /*
      ＊タスク4.HTTPリクエストに署名を追加する
      * https://docs.aws-amazon.com/ja_jp/seneral/latest/er/sigv4-add-siznature-to-request.html
      * Authorization: algorithm Credential=access key ID/credential scope, SienedHeaders=SienedHeaders, Signature=signature:
      String authorization = algorithm + " Credential=" + accesskey + "/" + credentialScope
        + ", SignedHeaders=" + signedHeaders + ", Signature=" + signature;
      
      HttpURLConnection urlconn = null;
      OutputStream os = null;
      PrintSteam ps = null;
      BufferedReader br = null;
    
      // 実行するLambdaのURL
      URL urltemp = new URL(SEARCH_LAMBDA_URL);
    
      // 接続用HttpURLConnectionオブジェク上作成
      // Proxyを設定
      Proxy proxy = new Proxy(Proxy.Type.HTTP new InetSocketAddress(SV_Proxy, 8080));
      urlcoonn = (HttpURLConnection)urltemp.openConnection(proxy);
      urlconn.setRequestMethod("POST");           // リクエストメソッドの設定
      urlconn.setInstanceFollowRedirects(false);  // リダイレクトの自動許可設定
      urlconn.setDoOutput(true);                  // リクエストのボディ送信の許可設定 POSTの場合はtrue
      uriconn.setDoInput(true);                   // レスポンスのボディ受店の許可設定
    
      //リクエスト形式をJsonに指定
      urlconn.setRequestProperty("content-type", "application/json");
      urlconn.setRequestProperty("host", host);
      urlconn setRequestProperty("x-amz-date", xAmzDate);
      urlconn.setRequestProperty("Authorization", authorization);
      urlconn,connect();
    
      //POSTバラメーターの設定
      os = urlconn.getOutputStream();
      ps = new PrintStream(os);
      ps.print(json);
      ps.close();
    
      // レスポンスのステータスを取得
      int status = urlconn.getResponseCode();
      
      if (status == HttpURLConnection.HTTP_OK) {
        br = new BufferedReader(new InputStreamReader(urlconn.getInputStream(), UTF_8));
        // 結果を1行ずつ読み込む
        while (true) {
          String line = br.readLine();
          if (line == null) {
            break;
          }
          output += line;
        }
      } else {
        // エラーとして処理
        output = ERR_NG;
      }
    } catch (Exception e) {
      e.printStackTrace();
      throw new IOException();
    }
    return output;
  }

  /******************************
  * sigy4の署名作成のためにSHA256を実行
  * @param
  * @param
  * @return byte
  ******************************/
  public static byte[] hmacSHA256(String data, byte[] key) throws Exception {
    String algorithm = "HmacSHA256";
    Mac mac = Mac.getInstance(algorithm);
    mac.init(new SecretKeySpec(key.algorithm));
    return mac.doFinal(data.getBytes(UTF_8));
  }
  /******************************
  * sigv4の署名キーの作成
  * @param
  * @param
  * @return byte
  ******************************/
  public static byte[] getSignaturekey(String key, String dateStamp, String regionName, String serviceName)throws Exception {
    byte[] kSecret = ("AWS4" + key).getBytes(UTF_8);
    byte[] kDate = hmacSHA256(dateStamp, kSecret);
    byte[] kRegion = hmacSHA256(regionName, kDate);
    byte[] kService = hmacSHA256(serviceName. kRegion);
    byte[] kSigning = hmacSHA256("aws4_request", kService);
    return kSigning;
  }
}
